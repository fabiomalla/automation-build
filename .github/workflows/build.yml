run-name: ${{ github.event.inputs.branch || 'Build and Deploy' }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build"
        required: true
      forceScreenshots:
        description: "Force screenshots creation"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  build_ios:
    runs-on: macos-latest

    steps:          
      - name: Checkout the Private Repository
        uses: actions/checkout@v3
        with:
          repository: lorenzomalla/easybook-app-refactor
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Ruby & Bundle
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      
      - name: Create Gemfile and install gems
        run: |
          cat > Gemfile <<'EOF'
          source "https://rubygems.org"
          gem "fastlane", ">= 2.228.0"
          EOF
          bundle install --jobs 4 --retry 3
      
      - name: Make fastlane available on PATH (binstubs)
        run: |
          bundle binstubs fastlane --path vendor/bundle/bin
          echo "$PWD/vendor/bundle/bin" >> $GITHUB_PATH
          export PATH="$PWD/vendor/bundle/bin:$PATH"
          which fastlane
          fastlane --version
      
      - name: Debug PATH before EAS
        run: |
          echo "PATH is: $PATH"
          which fastlane || echo "fastlane not found"
          fastlane --version || echo "cannot run fastlane"
      
      - name: Symlink fastlane globally
        run: |
          sudo ln -sf "$PWD/vendor/bundle/bin/fastlane" /usr/local/bin/fastlane
          which fastlane
          fastlane --version
      
      - name: Version installed of Fastlane
        run: |
          bundle exec fastlane --version
          ruby -v
          bundle show fastlane

      # Step per settare le variabili d'ambiente basato su USE_LORENZO e gestire il file APPLE_P8
      - name: Set environment variables for iOS and handle APPLE_P8
        run: |
          echo "Setting default environment variables"
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_ISSUER_ID=${{ secrets.APPLE_ISSUER_ID }}" >> $GITHUB_ENV
          echo "APPLE_KEY_ID=${{ secrets.APPLE_KEY_ID }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
          echo "CERT_P12_BASE64=${{ secrets.CERT_P12_BASE64 }}" >> $GITHUB_ENV
          echo "CERT_P12_PASSWORD=${{ secrets.CERT_P12_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_P8=${{ secrets.APPLE_P8 }}" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: ".node-version"
          cache: "npm"

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: 16.19.1
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 16.4

      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            brew install jq
          else
            echo "jq is already installed"
          fi
          
      - name: Extract and transform app name from app.json
        id: extract-transform-name
        run: |
          NAME=$(jq -r '.expo.name' app.json)
          BUNDLE_TARGET=$(echo $NAME | tr -d " .'&-" )
          BUNDLE_ID=$(jq -r '.expo.ios.bundleIdentifier' app.json)
          EXTENSION_BUNDLE_ID="${BUNDLE_ID}.OneSignalNotificationServiceExtension"
          APP_VERSION=$(jq -r '.expo.version' app.json)
          APP_NAME=$(jq -r '.expo.name' app.json)
          echo "BUNDLE_TARGET=$BUNDLE_TARGET" >> $GITHUB_ENV
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "EXTENSION_BUNDLE_ID=$EXTENSION_BUNDLE_ID" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Determine if screenshots should be forced
        run: |
          if [[ "${{ github.event.inputs.forceScreenshots }}" == "true" || "${{ env.APP_VERSION }}" == "1.0.0" ]]; then
            echo "FORCE_SCREENSHOTS=true" >> $GITHUB_ENV
          else
            echo "FORCE_SCREENSHOTS=false" >> $GITHUB_ENV
          fi

      - name: Configure Fastlane API Key
        run: |
          echo "=== üîß CONFIGURAZIONE FASTLANE API KEY ==="
          if [[ "$USE_LORENZO" == "true" ]]; then
            echo "Using Lorenzo Apple P8"
            echo "${{ secrets.LORENZO_APPLE_P8 }}" | base64 --decode > fastlane/AuthKey.p8
          else
            echo "Using standard Apple P8"
            echo "${{ secrets.APPLE_P8 }}" | base64 --decode > fastlane/AuthKey.p8
          fi
          
          # Verifica che il file sia stato creato
          if [ -f "fastlane/AuthKey.p8" ]; then
            echo "‚úÖ AuthKey.p8 creato correttamente"
            ls -la fastlane/AuthKey.p8
          else
            echo "‚ùå AuthKey.p8 NON creato"
            exit 1
          fi
          
          # Crea api_key.json
          jq -n --arg key_id "${{ env.APPLE_KEY_ID }}" --arg issuer_id "${{ env.APPLE_ISSUER_ID }}" --arg key "$(cat fastlane/AuthKey.p8)" --argjson in_house false \
            '{key_id: $key_id, issuer_id: $issuer_id, key: $key, in_house: $in_house}' > fastlane/api_key.json
          
          echo "‚úÖ api_key.json creato"
          echo "=== Contenuto api_key.json ==="
          cat fastlane/api_key.json
          echo "=== ‚úÖ FINE CONFIGURAZIONE FASTLANE ==="

      - name: Run Fastlane Create App
        env:
          AUTH_KEY_PATH: "fastlane/AuthKey.p8"
          APPLE_ID: ${{ env.APPLE_ID }}
          APPLE_KEY_ID: ${{ env.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ env.APPLE_ISSUER_ID }}
          BUNDLE_ID: ${{ env.BUNDLE_ID }}
          EXTENSION_BUNDLE_ID: ${{ env.EXTENSION_BUNDLE_ID }}
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          echo "=== üöÄ FASTLANE CREATE APP ==="
          echo "AUTH_KEY_PATH: $AUTH_KEY_PATH"
          echo "APPLE_ID: $APPLE_ID"
          echo "APPLE_KEY_ID: $APPLE_KEY_ID"
          echo "APPLE_ISSUER_ID: $APPLE_ISSUER_ID"
          echo "BUNDLE_ID: $BUNDLE_ID"
          echo "EXTENSION_BUNDLE_ID: $EXTENSION_BUNDLE_ID"
          echo "APP_NAME: $APP_NAME"
          echo ""
          bundle exec fastlane create_app
          echo "=== ‚úÖ FINE FASTLANE CREATE APP ==="

      - name: Debug EAS Configuration
        run: |
          echo "=== üîç DEBUG EAS CONFIGURATION ==="
          echo "=== Contenuto eas.json ==="
          cat eas.json
          echo ""
          echo "=== Contenuto app.json ==="
          cat app.json
          echo ""
          echo "=== Verifica EAS CLI ==="
          eas --version
          echo ""
          echo "=== Verifica autenticazione EAS ==="
          eas whoami
          echo ""
          echo "=== Verifica progetto EAS ==="
          eas project:info
          echo "=== ‚úÖ FINE DEBUG EAS CONFIGURATION ==="

      - name: Debug Environment Variables
        run: |
          echo "=== üîç DEBUG ENVIRONMENT VARIABLES ==="
          echo "BUNDLE_TARGET: $BUNDLE_TARGET"
          echo "BUNDLE_ID: $BUNDLE_ID"
          echo "EXTENSION_BUNDLE_ID: $EXTENSION_BUNDLE_ID"
          echo "APP_NAME: $APP_NAME"
          echo "APP_VERSION: $APP_VERSION"
          echo "APPLE_ID: $APPLE_ID"
          echo "APPLE_KEY_ID: $APPLE_KEY_ID"
          echo "APPLE_ISSUER_ID: $APPLE_ISSUER_ID"
          echo "APPLE_TEAM_ID: $APPLE_TEAM_ID"
          echo "FORCE_SCREENSHOTS: $FORCE_SCREENSHOTS"
          echo "=== ‚úÖ FINE DEBUG ENVIRONMENT VARIABLES ==="

      - name: Install Apple Sim utils to take screenshots
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          echo "=== üì± INSTALL APPLE SIM UTILS ==="
          brew tap wix/brew
          brew install applesimutils
          echo "=== ‚úÖ FINE INSTALL APPLE SIM UTILS ==="

      - name: Detox rebuild framework cache
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          echo "=== üîÑ DETOX REBUILD FRAMEWORK CACHE ==="
          yarn detox rebuild-framework-cache
          echo "=== ‚úÖ FINE DETOX REBUILD FRAMEWORK CACHE ==="

      - name: Create detox build to take screenshots
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          echo "=== üì± CREATE DETOX BUILD ==="
          npm run build:ios:test
          echo "=== ‚úÖ FINE CREATE DETOX BUILD ==="

      - name: Decompress detox build artifact
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          echo "=== üì¶ DECOMPRESS DETOX BUILD ARTIFACT ==="
          tar -xzvf build-*.tar.gz -C ./
          echo "=== ‚úÖ FINE DECOMPRESS DETOX BUILD ARTIFACT ==="

      - name: Take app screenshots
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          echo "=== üì∏ TAKE APP SCREENSHOTS ==="
          npm run generate:ios:screenshots
          echo "=== ‚úÖ FINE TAKE APP SCREENSHOTS ==="

      - name: Pre-Build Debug
        run: |
          echo "=== üîç PRE-BUILD DEBUG ==="
          echo "=== Verifica file necessari ==="
          ls -la fastlane/AuthKey.p8 || echo "‚ùå AuthKey.p8 non trovato"
          ls -la fastlane/api_key.json || echo "‚ùå api_key.json non trovato"
          echo ""
          echo "=== Verifica EAS credentials ==="
          eas credentials -p ios --non-interactive || echo "‚ùå Errore verifica credentials"
          echo ""
          echo "=== Verifica progetto ==="
          eas project:info
          echo "=== ‚úÖ FINE PRE-BUILD DEBUG ==="

      - name: Build iOS
        env:
          EXPO_APPLE_TEAM_ID: ${{ env.APPLE_TEAM_ID }}
          EXPO_APPLE_KEY_ID: ${{ env.APPLE_KEY_ID }}
          EXPO_APPLE_ISSUER_ID: ${{ env.APPLE_ISSUER_ID }}
          EXPO_APPLE_API_KEY_PATH: "fastlane/AuthKey.p8"
          # Debug
          DEBUG: "1"
          EXPO_DEBUG: "1"
          EXPO_SKIP_DOCTOR: "true"
        run: |
          echo "=== üöÄ INIZIO BUILD iOS ==="
          echo "=== Variabili d'ambiente per il build ==="
          echo "EXPO_APPLE_TEAM_ID: $EXPO_APPLE_TEAM_ID"
          echo "EXPO_APPLE_KEY_ID: $EXPO_APPLE_KEY_ID"
          echo "EXPO_APPLE_ISSUER_ID: $EXPO_APPLE_ISSUER_ID"
          echo "EXPO_APPLE_API_KEY_PATH: $EXPO_APPLE_API_KEY_PATH"
          echo "DEBUG: $DEBUG"
          echo "EXPO_DEBUG: $EXPO_DEBUG"
          echo "EXPO_SKIP_DOCTOR: $EXPO_SKIP_DOCTOR"
          echo ""
          
          # Verifica file AuthKey.p8
          if [ -f "fastlane/AuthKey.p8" ]; then
            echo "‚úÖ AuthKey.p8 trovato"
            ls -la fastlane/AuthKey.p8
          else
            echo "‚ùå AuthKey.p8 NON trovato"
            exit 1
          fi
          
          echo "=== Esecuzione EAS build ==="
          eas build -p ios --non-interactive --local
          
          echo "=== ‚úÖ BUILD iOS COMPLETATO ==="

      - name: Post-Build Debug
        run: |
          echo "=== üîç POST-BUILD DEBUG ==="
          echo "=== Verifica file generati ==="
          ls -la *.ipa || echo "‚ùå Nessun file IPA trovato"
          ls -la *.tar.gz || echo "‚ùå Nessun file tar.gz trovato"
          echo ""
          echo "=== Verifica log EAS ==="
          ls -la ~/.expo/ || echo "‚ùå Cartella .expo non trovata"
          echo "=== ‚úÖ FINE POST-BUILD DEBUG ==="

      - name: Upload to App Store
        env:
          AUTH_KEY_PATH: "fastlane/AuthKey.p8"
          APPLE_KEY_ID: ${{ env.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ env.APPLE_ISSUER_ID }}
          SKIP_SCREENSHOTS: ${{ env.FORCE_SCREENSHOTS == 'false' }}
        run: |
          echo "=== üì§ UPLOAD TO APP STORE ==="
          echo "AUTH_KEY_PATH: $AUTH_KEY_PATH"
          echo "APPLE_KEY_ID: $APPLE_KEY_ID"
          echo "APPLE_ISSUER_ID: $APPLE_ISSUER_ID"
          echo "SKIP_SCREENSHOTS: $SKIP_SCREENSHOTS"
          echo ""
          bundle exec fastlane upload_ipa_to_app_store
          echo "=== ‚úÖ FINE UPLOAD TO APP STORE ==="

  build_android:
    runs-on: ubuntu-latest

    steps:
      - name: Delete unnecessary tools üîß
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: false # Keep Don't remove Android tools
          tool-cache: true # Remove image tool cache - rm -rf "$AGENT_TOOLSDIRECTORY"
          dotnet: true # rm -rf /usr/share/dotnet
          haskell: true # rm -rf /opt/ghc...
          swap-storage: true # rm -f /mnt/swapfile (4GiB)
          docker-images: false # Takes 16s (`nowinandroid`), enable if needed in the future
          large-packages: false # includes google-cloud-sdk and it's slow

      - name: Checkout the Private Repository
        uses: actions/checkout@v3
        with:
          repository: lorenzomalla/easybook-app-refactor
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: ".node-version"
          cache: "npm"

      - name: Install rclone
        run: |
          curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip rclone-current-linux-amd64.zip
          cd rclone-*-linux-amd64
          sudo cp rclone /usr/bin/rclone
          sudo chmod 755 /usr/bin/rclone
          rclone version
      
      - name: Configure rclone (base64)
        run: |
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG_BASE64 }}" | base64 --decode > ~/.config/rclone/rclone.conf
      
      - name: üß™ Test Rclone Drive Access
        run: |
          TEST_FOLDER="screenshots-sibook/test-rclone-$(date +%s)"
          echo "Provo a creare la cartella su Drive: $TEST_FOLDER"
          rclone mkdir "gdrive:$TEST_FOLDER"
          echo "‚úÖ Rclone ha funzionato! Cartella test creata con successo."

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: 12.6.2
          token: ${{ secrets.EXPO_TOKEN }}

      # Step to set environment variables for Android based on lorenzo.txt
      - name: Set environment variables for Android
        run: |
          echo "GOOGLE_PLAY_EMAIL=${{ secrets.GOOGLE_PLAY_EMAIL }}" >> $GITHUB_ENV
          echo "GOOGLE_PLAY_PASSWORD=${{ secrets.GOOGLE_PLAY_PASSWORD }}" >> $GITHUB_ENV
          echo "GOOGLE_PLAY_JSON_KEY_BASE64=${{ secrets.GOOGLE_PLAY_JSON_KEY_BASE64 }}" >> $GITHUB_ENV

      - name: Extract app.json info
        id: extract-transform-name
        run: |
          ANDROID_PACKAGE=$(jq -r '.expo.android.package' app.json)
          APP_NAME=$(jq -r '.expo.name' app.json)
          APP_VERSION=$(jq -r '.expo.version' app.json)
          echo "ANDROID_PACKAGE=$ANDROID_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Determine if screenshots should be forced
        run: |
          if [[ "${{ github.event.inputs.forceScreenshots }}" == "true" || "${{ env.APP_VERSION }}" == "1.0.0" ]]; then
            echo "FORCE_SCREENSHOTS=true" >> $GITHUB_ENV
          else
            echo "FORCE_SCREENSHOTS=false" >> $GITHUB_ENV
          fi

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Install dependencies
        run: npm install

      - name: Decode and Create Google Play Json Key
        run: |
          echo "${{ env.GOOGLE_PLAY_JSON_KEY_BASE64 }}" | base64 --decode > google_play_json_key.json

      - name: Create detox build to take screenshots
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: npm run build:android:test

      - name: Decompress detox build artifact
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          mkdir -p ./builds
          tar -xzvf build-*.tar.gz -C ./builds

      - name: Enable KVM for running Android Emulator
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Take app screenshots on Android Emulator ü§ñ
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: Nexus_6_API_33
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: npm run generate:android:screenshots

      - name: Upload screenshots and logo to Google Drive üì§
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          DEST="gdrive:screenshots-sibook/${{ env.APP_NAME }}_${{ env.APP_VERSION }}"
          echo "Creazione cartella su Drive: $DEST"
          rclone mkdir "$DEST"
      
          echo "üîº Copio screenshots..."
          rclone copy ./fastlane/metadata/android/it-IT/images/phoneScreenshots "$DEST/phoneScreenshots" --create-empty-src-dirs
      
          echo "üîº Copio icona/logo..."
          rclone copy ./assets/images/logo-lg.png "$DEST/logo.png"

      - name: Build Android
        run: npm run build:android

      - name: Upload .aab finale su Google Drive üì¶
        run: |
          DEST="gdrive:screenshots-sibook/${{ env.APP_NAME }}_${{ env.APP_VERSION }}"
          echo "Caricamento .aab finale su Drive in: $DEST"
      
          AAB_FILE=$(ls /home/runner/work/automation-build/automation-build/build-*.aab | head -n 1)
      
          if [ -f "$AAB_FILE" ]; then
            echo "‚úÖ File trovato: $AAB_FILE"
            rclone copy "$AAB_FILE" "$DEST/app-release.aab"
            echo "‚úÖ .aab caricato con successo su Google Drive."
          else
            echo "‚ùå Nessun file .aab trovato!"
            exit 1
          fi

      - name: Upload the update to the Play Store üöÄ
        if: env.APP_VERSION != '1.0.0'
        env:
          ANDROID_PACKAGE_NAME: ${{ env.ANDROID_PACKAGE }}
          GOOGLE_PLAY_JSON_KEY: google_play_json_key.json
          SKIP_SCREENSHOTS: ${{ env.FORCE_SCREENSHOTS == 'false' }}
        run: fastlane upload_aab_to_play_store

      - name: Checkout Easybook Automation Repository
        if: env.APP_VERSION == '1.0.0'
        uses: actions/checkout@v3
        with:
          repository: lorenzomalla/easybook-release-automation-android
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          path: easybook-release-automation-android

      - name: Install Easybook release automation dependencies
        if: env.APP_VERSION == '1.0.0'
        run: npm install
        working-directory: easybook-release-automation-android

      - name: Create the app on the Play Store with Easybook Automation üì≤
        if: env.APP_VERSION == '1.0.0'
        run: npm run start
        working-directory: easybook-release-automation-android
        env:
          GOOGLE_PLAY_EMAIL: ${{ env.GOOGLE_PLAY_EMAIL }}
          GOOGLE_PLAY_PASSWORD: ${{ env.GOOGLE_PLAY_PASSWORD }}
