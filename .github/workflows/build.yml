name: Build and Deploy
run-name: ${{ inputs.branch }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build"
        required: true
      forceScreenshots:
        description: "Force screenshots creation"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  build_ios:
    runs-on: macos-latest
    steps:
      - name: Checkout the Private Repository
        uses: actions/checkout@v3
        with:
          repository: lorenzomalla/easybook-app-refactor
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: ".node-version"
          cache: "npm"

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: 16.19.1
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 16.4

      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then brew install jq; else echo "jq is already installed"; fi

      - name: Extract and set iOS env from app.json
        run: |
          NAME=$(jq -r '.expo.name' app.json)
          echo "BUNDLE_TARGET=$(echo $NAME | tr -d " .'&-" )" >> $GITHUB_ENV
          echo "BUNDLE_ID=$(jq -r '.expo.ios.bundleIdentifier' app.json)" >> $GITHUB_ENV
          echo "APP_VERSION=$(jq -r '.expo.version' app.json)" >> $GITHUB_ENV
          echo "APP_NAME=$(jq -r '.expo.name' app.json)" >> $GITHUB_ENV
          echo "EXTENSION_BUNDLE_ID=$(jq -r '.expo.ios.bundleIdentifier' app.json).OneSignalNotificationServiceExtension" >> $GITHUB_ENV

      - name: Debug - env, config, identities
        run: |
          node -v && npm -v && eas --version
          echo "Xcode: $(xcodebuild -version | tr '\n' ' | ')"
          echo "PWD=$PWD"; ls -la
          echo "---- app.json (ios) ----"; jq '.expo.ios' app.json
          echo "---- eas.json (prod ios) BEFORE ----"; jq '.build.production.ios' eas.json || true

      - name: Ensure eas.json uses local credentials
        run: |
          tmp=$(mktemp)
          jq '.build.production.ios.credentialsSource="local" | .build.production.ios |= del(.enterpriseProvisioning)' eas.json > "$tmp"
          mv "$tmp" eas.json
          echo "---- eas.json (prod ios) AFTER ----"; jq '.build.production.ios' eas.json

      - name: Create and configure Keychain
        run: |
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security list-keychains -s build.keychain login.keychain
          echo "Keychains:"; security list-keychains
          echo "Keychain dumped."

      - name: Import Distribution Certificate (P12) into keychain
        run: |
          echo "${{ secrets.CERT_P12_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -P "${{ secrets.CERT_P12_PASSWORD }}" -A -k build.keychain -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          echo "Identities:"; security find-identity -v -p codesigning | cat

      - name: Configure Fastlane API Key JSON (for sigh)
        run: |
          mkdir -p fastlane
          echo "${{ secrets.APPLE_P8 }}" | base64 --decode > fastlane/AuthKey.p8
          jq -n --arg key_id "${{ secrets.APPLE_KEY_ID }}" --arg issuer_id "${{ secrets.APPLE_ISSUER_ID }}" --arg key "$(cat fastlane/AuthKey.p8)" --argjson in_house false \
            '{key_id: $key_id, issuer_id: $issuer_id, key: $key, in_house: $in_house}' > fastlane/api_key.json
          echo "api_key.json ready."

      - name: Download AppStore provisioning profile (Main App)
        run: |
          bundle exec fastlane sigh \
            --api_key_path fastlane/api_key.json \
            --team_id "${{ secrets.APPLE_TEAM_ID }}" \
            --app_identifier "${{ env.BUNDLE_ID }}" \
            --filename "provisioning_profile.mobileprovision" \
            --skip_certificate_verification
          ls -la provisioning_profile.mobileprovision

      - name: Download AppStore provisioning profile (OneSignal Extension)
        run: |
          bundle exec fastlane sigh \
            --api_key_path fastlane/api_key.json \
            --team_id "${{ secrets.APPLE_TEAM_ID }}" \
            --app_identifier "${{ env.EXTENSION_BUNDLE_ID }}" \
            --filename "provisioning_profile_onesignal.mobileprovision" \
            --skip_certificate_verification
          ls -la provisioning_profile_onesignal.mobileprovision

      - name: Create credentials.json for EAS local build
        run: |
          cat > credentials.json <<'EOF'
          {
            "ios": {
              "OneSignalNotificationServiceExtension": {
                "distributionCertificate": { "path": "certificate.p12", "password": "${{ secrets.CERT_P12_PASSWORD }}" },
                "provisioningProfilePath": "provisioning_profile_onesignal.mobileprovision"
              },
              "${{ env.BUNDLE_TARGET }}": {
                "distributionCertificate": { "path": "certificate.p12", "password": "${{ secrets.CERT_P12_PASSWORD }}" },
                "provisioningProfilePath": "provisioning_profile.mobileprovision"
              }
            }
          }
          EOF
          echo "credentials.json content:"; cat credentials.json

      - name: Sanity check - local creds presence
        run: |
          echo "Expecting local creds (credentials.json + 2 profiles)"
          [ -f credentials.json ] && echo "credentials.json OK" || (echo "NO credentials.json" && exit 1)
          [ -f provisioning_profile.mobileprovision ] && echo "main profile OK" || (echo "NO main profile" && exit 1)
          [ -f provisioning_profile_onesignal.mobileprovision ] && echo "ext profile OK" || (echo "NO ext profile" && exit 1)

      - name: Build iOS locally with EAS
        run: |
          echo "Starting EAS iOS build (local, production)"
          eas build -p ios --profile production --local --non-interactive

  build_android:
    runs-on: ubuntu-latest

    steps:
      - name: Delete unnecessary tools 🔧
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: false
          tool-cache: true
          dotnet: true
          haskell: true
          swap-storage: true
          docker-images: false
          large-packages: false

      - name: Checkout the Private Repository
        uses: actions/checkout@v3
        with:
          repository: lorenzomalla/easybook-app-refactor
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: ".node-version"
          cache: "npm"

      - name: Install rclone
        run: |
          curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip rclone-current-linux-amd64.zip
          cd rclone-*-linux-amd64
          sudo cp rclone /usr/bin/rclone
          sudo chmod 755 /usr/bin/rclone
          rclone version

      - name: Configure rclone (base64)
        run: |
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG_BASE64 }}" | base64 --decode > ~/.config/rclone/rclone.conf

      - name: 🧪 Test Rclone Drive Access
        run: |
          TEST_FOLDER="screenshots-sibook/test-rclone-$(date +%s)"
          echo "Provo a creare la cartella su Drive: $TEST_FOLDER"
          rclone mkdir "gdrive:$TEST_FOLDER"
          echo "✅ Rclone ha funzionato! Cartella test creata con successo."

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: 12.6.2
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Set environment variables for Android
        run: |
          echo "GOOGLE_PLAY_EMAIL=${{ secrets.GOOGLE_PLAY_EMAIL }}" >> $GITHUB_ENV
          echo "GOOGLE_PLAY_PASSWORD=${{ secrets.GOOGLE_PLAY_PASSWORD }}" >> $GITHUB_ENV
          echo "GOOGLE_PLAY_JSON_KEY_BASE64=${{ secrets.GOOGLE_PLAY_JSON_KEY_BASEOUT }}" >> $GITHUB_ENV

      - name: Extract app.json info
        id: extract-transform-name-android
        run: |
          ANDROID_PACKAGE=$(jq -r '.expo.android.package' app.json)
          APP_NAME=$(jq -r '.expo.name' app.json)
          APP_VERSION=$(jq -r '.expo.version' app.json)
          echo "ANDROID_PACKAGE=$ANDROID_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Determine if screenshots should be forced
        run: |
          if [[ "${{ github.event.inputs.forceScreenshots }}" == "true" || "${{ env.APP_VERSION }}" == "1.0.0" ]]; then
            echo "FORCE_SCREENSHOTS=true" >> $GITHUB_ENV
          else
            echo "FORCE_SCREENSHOTS=false" >> $GITHUB_ENV
          fi

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Install dependencies
        run: npm install

      - name: Decode and Create Google Play Json Key
        run: |
          echo "${{ env.GOOGLE_PLAY_JSON_KEY_BASE64 }}" | base64 --decode > google_play_json_key.json

      - name: Create detox build to take screenshots
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: npm run build:android:test

      - name: Decompress detox build artifact
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          mkdir -p ./builds
          tar -xzvf build-*.tar.gz -C ./builds

      - name: Enable KVM for running Android Emulator
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Take app screenshots on Android Emulator 🤖
        if: ${{ env.FORCE_SCREENSHOTS == 'true' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: Nexus_6_API_33
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: npm run generate:android:screenshots

      - name: Build Android
        run: npm run build:android

      - name: Upload .aab finale su Google Drive 📦
        run: |
          DEST="gdrive:screenshots-sibook/${{ env.APP_NAME }}_${{ env.APP_VERSION }}"
          echo "Caricamento .aab finale su Drive in: $DEST"
          AAB_FILE=$(ls /home/runner/work/automation-build/automation-build/build-*.aab | head -n 1)
          if [ -f "$AAB_FILE" ]; then
            echo "✅ File trovato: $AAB_FILE"
            rclone copy "$AAB_FILE" "$DEST/app-release.aab"
            echo "✅ .aab caricato con successo su Google Drive."
          else
            echo "❌ Nessun file .aab trovato!"
            exit 1
          fi

      - name: Upload the update to the Play Store 🚀
        if: env.APP_VERSION != '1.0.0'
        env:
          ANDROID_PACKAGE_NAME: ${{ env.ANDROID_PACKAGE }}
          GOOGLE_PLAY_JSON_KEY: google_play_json_key.json
          SKIP_SCREENSHOTS: ${{ env.FORCE_SCREENSHOTS == 'false' }}
        run: fastlane upload_aab_to_play_store

      - name: Checkout Easybook Automation Repository
        if: env.APP_VERSION == '1.0.0'
        uses: actions/checkout@v3
        with:
          repository: lorenzomalla/easybook-release-automation-android
          token: ${{ secrets.EASYBOOK_RELEASE_AUTOMATION_REPO_TOKEN }}
          path: easybook-release-automation-android

      - name: Install Easybook release automation dependencies
        if: env.APP_VERSION == '1.0.0'
        run: npm install
        working-directory: easybook-release-automation-android

      - name: Create the app on the Play Store with Easybook Automation 📲
        if: env.APP_VERSION == '1.0.0'
        run: npm run start
        working-directory: easybook-release-automation-android
        env:
          GOOGLE_PLAY_EMAIL: ${{ env.GOOGLE_PLAY_EMAIL }}
          GOOGLE_PLAY_PASSWORD: ${{ env.GOOGLE_PLAY_PASSWORD }}
